set nocompatible              " be iMproved, required
" filetype off                  " required

filetype plugin indent on    " required

" vim-sensible
syntax enable
set backspace=indent,eol,start
set autoindent
set complete-=i
set smarttab
set incsearch
set laststatus=2
set wildmenu
set scrolloff=3
set sidescrolloff=10
set formatoptions+=j
set autoread
set viminfo^=!
set sessionoptions-=options

" disable mouse integration
set mouse=

" use system clipboard
set clipboard^=unnamed,unnamedplus

" enable line numbers
set number

" solarized
" set background=dark
"colorscheme solarized

" vim-gitgutter
set updatetime=250
"let g:gitgutter_highlight_lines = 1

" ale
let g:ale_python_flake8_options = "--max-line-length=120"

" lightline
set noshowmode
let g:lightline = {
\ 'active': {
\   'left': [ ['mode', 'paste'],
\             ['readonly', 'filename', 'modified', 'fileformat', 'fileencoding', 'filetype']],
\   'right': [['lineinfo', 'charvaluehex'],
\             ['percent'],
\             ['readonly', 'linter_warnings', 'linter_errors', 'linter_ok']]
\ },
\ 'component_expand': {
\   'linter_warnings': 'LightlineLinterWarnings',
\   'linter_errors': 'LightlineLinterErrors',
\   'linter_ok': 'LightlineLinterOK'
\ },
\ 'component_type': {
\   'readonly': 'error',
\   'linter_warnings': 'warning',
\   'linter_errors': 'error'
\ },
\ 'component': {
\   'charvaluehex': '0x%B'
\ },
\ 'colorscheme': 'onedark',
\ }

function! LightlineLinterWarnings() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '' : printf('%d ◆', all_non_errors)
endfunction

function! LightlineLinterErrors() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '' : printf('%d ✗', all_errors)
endfunction

function! LightlineLinterOK() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '✓ ' : ''
endfunction

autocmd User ALELint call s:MaybeUpdateLightline()

" Update and show lightline but only if it's visible (e.g., not in Goyo)
function! s:MaybeUpdateLightline()
  if exists('#lightline')
    call lightline#update()
  end
endfunction

" indentLine
let g:indentLine_char_list = ['|', '¦', '┆', '┊']
let g:indentLine_setColors = 0


" Jump to last position when reopening file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" highlight max line length
set colorcolumn=120

let g:pdv_template_dir = $HOME ."/.vim/pack/start/pdv/templates_snip"

" unconceal cursor line (for markdown)
let g:indentLine_concealcursor = ""

" onedark colorscheme
let g:onedark_terminal_italics = 1
" colorscheme onedark
call timer_start(0, {-> execute("colorscheme onedark")})

let g:chadtree_settings = {
\ 'theme': {
\    'icon_glyph_set': 'devicons'
\  }
\ }

let g:hcl_align = 1
let g:hcl_fold_sections = 0
let g:terraform_align = 1
let g:terraform_fmt_on_save = 1
let g:terraform_fold_sections = 0
